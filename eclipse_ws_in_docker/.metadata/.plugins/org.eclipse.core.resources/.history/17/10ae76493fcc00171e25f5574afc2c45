/*
 * main.c
 *
 *  Created on: Nov 17, 2017
 *      Author: root
 */


#include <stdio.h>
#include <stdlib.h>
#include <openssl/hmac.h>
#include <openssl/rand.h>

#include <libconfig.h>
#include <string.h>
#include "main.h"

#if 0
int main(void) {
	BIGNUM *x, *y, *mask;

    if (((mask = BN_new()) == NULL)) {
        puts("unable to commit to peer!\n");
        return -1;
    }
    else{
		puts("!!!Hello World!!!"); /* prints !!!Hello World!!! */
		return EXIT_SUCCESS;
    }
}
#else
int main(void) {
	char *conffile = "/work/C_Project/openssl_trial/authsae.sample.cfg";
	char *meshid="";
    struct sae_config sae_conf;

    if (conffile) {
        struct config_t cfg;
        struct config_setting_t *section;

        config_init(&cfg);
        if (!config_read_file(&cfg, conffile)) {
            fprintf(stderr, "Failed to load config file %s: %s\n", conffile,
                    config_error_text(&cfg));
            return -1;
        }
        section = config_lookup(&cfg, "authsae.sae");
        if (section == NULL) {
            fprintf(stderr, "Config file has not sae section\n");
            return -1;
        }

        if (sae_parse_libconfig(section, &sae_conf) != 0) {
            fprintf(stderr, "Failed to parse SAE configuration.\n");
            return -1;
        }

        config_destroy(&cfg);
    }

    if (sae_initialize(meshid, &sae_conf) < 0) {
        fprintf(stderr, "cannot configure SAE, check config file!\n");
        exit(EXIT_FAILURE);
    }

	return EXIT_SUCCESS;
}

int
sae_parse_libconfig (struct config_setting_t *sae_section, struct sae_config* config)
{
    struct config_setting_t *setting, *group;
    char *pwd;

    memset(config, 0, sizeof(struct sae_config));
    config_setting_lookup_int(sae_section, "debug", (config_int_t *)&config->debug);
    setting = config_setting_get_member(sae_section, "group");
    if (setting != NULL) {
        while (1) {
            group = config_setting_get_elem(setting, config->num_groups);
            if (!group)
                break;
            config->group[config->num_groups] =
                config_setting_get_int_elem(setting, config->num_groups);
            config->num_groups++;
            if (config->num_groups == SAE_MAX_EC_GROUPS)
                break;
        }
    }
    if (config_setting_lookup_string(sae_section, "password", (const char **)&pwd)) {
        strncpy(config->pwd, pwd, SAE_MAX_PASSWORD_LEN);
        if (config->pwd[SAE_MAX_PASSWORD_LEN - 1] != 0) {
            fprintf(stderr, "WARNING: Truncating password\n");
            config->pwd[SAE_MAX_PASSWORD_LEN - 1] = 0;
        }
    }
    config_setting_lookup_int(sae_section, "retrans", (config_int_t *)&config->retrans);
    config_setting_lookup_int(sae_section, "lifetime", (config_int_t *)&config->pmk_expiry);
    config_setting_lookup_int(sae_section, "thresh", (config_int_t *)&config->open_threshold);
    config_setting_lookup_int(sae_section, "blacklist", (config_int_t *)&config->blacklist_timeout);
    config_setting_lookup_int(sae_section, "giveup", (config_int_t *)&config->giveup_threshold);
    return 0;
}

#endif
